@using Microsoft.Maui.Controls
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="vue-app">
    {{ message }}
    <el-input v-model="input" placeholder="请输入内容"></el-input>
    <el-button @click="post">Post To Native</el-button>
    <el-dialog :visible.sync="showDialog" title="Native device msg recived!">
        <p>{{msg}}</p>
    </el-dialog>
    <p>Device Display</p>
    <p>{{deviceDisplay}}</p>
</div>



@code {
    private DotNetObjectReference<SecondPageWeb>? objRef;

    [Parameter]
    public SecondPage SecondPage { get; set; }

    [JSInvokable]
    public async Task Post(string content)
    {
        await SecondPage.DisplayAlert("Vue msg recived!", content, "Got it!");

    }

    [JSInvokable]
    public async Task<string> ReadDeviceDisplay()
    {
        return await Task.FromResult(SecondPage.ReadDeviceDisplay());

    }



    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public async void Recived(object o, OnPostEventArgs args)
    {
        await JSRuntime.InvokeAsync<string>("window.app.greet", args.Content);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                SecondPage.OnPost += this.Recived;

                await JSRuntime.InvokeAsync<IJSObjectReference>(
    "import", "./Views/SecondPageWeb.razor.js");
                await JSRuntime.InvokeAsync<string>("window.initObjRef", this.objRef);

            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }


    public void Dispose()
    {
        SecondPage.OnPost -= this.Recived;
    }


}